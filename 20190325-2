terminology n.専門用語
undergo v.経歴する
structed-binding n.オフィシャルの紹介を見てみると、配列とタプルしか紹介されてない。言いたいことは、宣言する時に、柔軟性が高まる
parameter-pack n."..."のようなパラメータパック
odr-used n.cppの専門用語。何かの環境でただ一つの定義のルールを守らないと
non-static data members n.cppの専門用語。クラスのメンバー
directive n.指令
capability n.能力

PREPROCESSOR
"The preprocessor is executed at translation phase 4, 
before the compilation. 
The result of preprocessing is a single file which is then passed to the actual compiler."
通訳のフェーズ4、コンパイルの前。プレコンパイルの結果は一つファイルとして、コンパイラの渡す。

"The preprocessing directives control the behavior of the preprocessor.
Each directive occupies one line and has the following format"
行ごとの指令になります。

"An expression is a sequence of operators and their operands, that specifies a computation."
しかし、operationは事前にcpp言語で定義されたので。種類は限られてます。ちなみに、"throw"はオペレーターじゃありません。

LANGUAGE LINKAGE
"Provides for linkage between modules written in different programming languages."
キーワード"extern"

INITIALIZATION
"nitialization of a variable provides its initial value at the time of construction.
The initial value may be provided in the initializer section of a declarator or a new expression. 
It also takes place during function calls: 
function parameters and the function return values are also initialized."
関数の初期値と返却値初期化される。
あるコンパイラのテストによると：

Hello World4196064
Hello World0
Hello World6295648
Hello World4196064
Hello World0

c++ coding rules.
https://google.github.io/styleguide/cppguide.html

HEADERS
c言語のxxx.hを対応する為に、cxxxと言うc++のheaderが普通に存在する。しかし、string.hとstringが全然関係ないheaderです。

cppバージョン:
C++ 98 year of 1998
C++ 03 year of 2003
C++ 11 year of 2011
C++ 14 year of 2014
C++ 17 year of 2017

// あはは。。。なるほど
#include <jni.h>
#include <string>

#define SOMEATTR __attribute__((visibility("default")))
#define SOME_EMPTY
extern "C" SOMEATTR void SOME_EMPTY doSomething() {
}
extern "C" JNIEXPORT jstring JNICALL
Java_ntt_1atc_co_jp_myapplication_MainActivity_stringFromJNI(
        JNIEnv *env,
        jobject /* this */) {
    std::string hello = "Hello from C++";
    doSomething();
    return env->NewStringUTF(hello.c_str());
}

Game prototype:

(scene1)<windows size?>
(layer)<add to scene?>
--------------------
title
--------------------
|
|█
|(start button)<action to transfer to next scene?>
|
↓
(scene2)<windows size?>
(layer)<add to scene?>
--------------------
select charactor
--------------------
〇〇〇〇〇(sprites)<positions? align?pictures to be prepared?>
〇〇〇〇〇
--------------------
|
|
|
|
↓
(11 kinds of charactors)
|
|
|
|
↓
「to be continued」

メモリ揃え

空間を使って時間を稼ぐ。
struct and class all use memory align.
struct ss{
byte a;
int b;
}
[a][][][][b][b][b][b]

when cpu reading memory, it can be faster. So the memory size used by class will also be affected by this.

&:
this will not cost any memory.
And when used as methodd parameter, normally it costs memory for copying as the input. 
However, if it is "&", the memory cost is zero.
